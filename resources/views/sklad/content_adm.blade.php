
&nbsp;
<div class="content" style="min-height:100%">
    <section class="content">
        <!-- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -->
        <div class="container-fluid" id="operationBlock">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex" style="gap: 5px;">
                    <button type="button" class="btn btn-warning btn-sm">–û–Ω–æ–≤–∏—Ç–∏</button>
                    <button type="button" class="btn btn-danger btn-sm">–ü–æ–º–∏–ª–∫–∞</button>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <div class="small-box" style="background-color: #b3b3b3;">
                        <div class="inner" style="color: #ffffff;">
                            <p>–ü—Ä–∏–Ω—è—Ç—å</p>
                            <button type="button" class="btn btn-secondary btn-switch" data-target="receiveoperation">–¢–∞–∫</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <div class="small-box" style="background-color: #b3b3b3;">
                        <div class="inner" style="color: #ffffff;">
                            <p>–û—Ç–≥—Ä—É–∑–∏—Ç—å</p>
                            <button type="button" class="btn btn-secondary btn-switch" data-target="alloperation">–¢–∞–∫</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –û—Ç–≥—Ä—É–∑–∫–∞ -->
        <div class="container-fluid d-none" id="alloperation">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex" style="gap: 5px;">
                    <button type="button" class="btn btn-warning btn-sm">–û–Ω–æ–≤–∏—Ç–∏</button>
                    <button type="button" class="btn btn-danger btn-sm">–ü–æ–º–∏–ª–∫–∞</button>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <div class="small-box" style="background-color: #b3b3b3;">
                        <div class="inner" style="color: #ffffff;">
                            <p>–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥</p>
                            <input id="quickScanInput" type="text" class="form-control form-control-lg mt-2"
                                   placeholder="–°–∫–∞–Ω..." autofocus autocomplete="off">
                        </div>
                    </div>
                </div>
            </div>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    const quickScanInput = document.getElementById('quickScanInput');
                    if (quickScanInput) {
                        // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –∫–∞–∂–¥—ã–µ 500 –º—Å
                        setInterval(() => {
                            if (document.activeElement !== quickScanInput) {
                                quickScanInput.focus();
                            }
                        }, 500);

                        let quickScanTimeout;
                        quickScanInput.addEventListener('input', function () {
                            clearTimeout(quickScanTimeout);

                            quickScanTimeout = setTimeout(() => {
                                const value = quickScanInput.value.trim();
                                if (value !== '') {
                                    console.log('üì¶ –ë—ã—Å—Ç—Ä—ã–π —Å–∫–∞–Ω:', value);
                                    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
                                    quickScanInput.value = '';
                                    // –†–µ–¥–∏—Ä–µ–∫—Ç
                                    window.location.href = '/sklad/orders/gp';
                                }
                            }, 300);
                        });
                    }
                });
            </script>

            <div class="row">
                <div class="col-12">
                    <div class="small-box" style="background-color: #b3b3b3;">
                        <div class="inner" style="color: #ffffff;">
                            <p>–°–∫–∞–Ω—É–≤–∞—Ç–∏</p>
                            <a href="/sklad/orders/gp" class="btn btn-secondary">–¢–∞–∫</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-3">
                <button class="btn btn-dark btn-switch" data-target="operationBlock">‚Üê –ù–∞–∑–∞–¥</button>
            </div>
        </div>
        <div class="container-fluid d-none" id="receiveoperation">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex" style="gap: 5px;">
                    <button type="button" class="btn btn-warning btn-sm">–û–Ω–æ–≤–∏—Ç–∏</button>
                    <button type="button" class="btn btn-danger btn-sm">–ü–æ–º–∏–ª–∫–∞</button>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <div class="small-box" style="background-color:#b3b3b3;">
                        <div class="inner" style="color:#ffffff;">
                            <p>–ü—Ä–∏—ë–º–∫–∞</p>
                            <button id="btnAccept" type="button" class="btn btn-secondary">–¢–∞–∫</button>
                        </div>
                    </div>
                </div>

{{--                <div class="col-12">--}}
{{--                    <div class="small-box" style="background-color: #b3b3b3;">--}}
{{--                        <div class="inner" style="color: #ffffff;">--}}
{{--                            <p>–†–∞–∑–º–µ—â–µ–Ω–∏–µ</p>--}}
{{--                            <a href="" class="btn btn-secondary">–¢–∞–∫</a>--}}
{{--                        </div>--}}
{{--                    </div>--}}
{{--                </div>--}}
                <div class="col-12">
                    <div class="small-box" style="background-color: #b3b3b3;">
                        <div class="inner" style="color: #ffffff;">
                            <p>–†–∞–∑–º–µ—â–µ–Ω–∏–µ</p>
                            <button id="btnPick" type="button" class="btn btn-secondary">–¢–∞–∫</button>
                        </div>
                    </div>
                </div>
                <div class="col-12">
                    <div class="small-box" style="background-color: #b3b3b3;">
                        <div class="inner" style="color: #ffffff;">
                            <p>–ü–µ—Ä–µ—Å—á—ë—Ç</p>
                            <a href="" class="btn btn-secondary">–¢–∞–∫</a>
                        </div>
                    </div>
                </div>
                <div class="col-12">
                    <div class="small-box" style="background-color: #b3b3b3;">
                        <div class="inner" style="color: #ffffff;">
                            <p>–°–æ–∑–¥–∞—Ç—å</p>
                            <a href="" class="btn btn-secondary">–¢–∞–∫</a>
                        </div>
                    </div>
                </div>
                <div class="col-12">
                    <div class="small-box" style="background-color: #b3b3b3;">
                        <div class="inner" style="color: #ffffff;">
                            <p>–ü—Ä–æ–≤–µ—Ä–∫–∞</p>
                            <a href="" class="btn btn-secondary">–¢–∞–∫</a>
                        </div>
                    </div>
                </div>
                <div class="col-12">
                    <div class="small-box" style="background-color: #b3b3b3;">
                        <div class="inner" style="color: #ffffff;">
                            <p>–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ</p>
                            <a href="" class="btn btn-secondary">–¢–∞–∫</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-3">
                <button class="btn btn-dark btn-switch" data-target="operationBlock">‚Üê –ù–∞–∑–∞–¥</button>
            </div>
        </div>
    </section>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.btn-switch').forEach(function (btn) {
            btn.addEventListener('click', function () {
                const targetId = btn.getAttribute('data-target');

                // –°–∫—Ä—ã—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                document.querySelectorAll('.container-fluid').forEach(function (el) {
                    el.classList.add('d-none');
                });

                // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π
                document.getElementById(targetId).classList.remove('d-none');
            });
        });
    });
</script>

<script>
    document.getElementById('refreshButton').addEventListener('click', function (e) {
        e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        const icon = document.getElementById('refreshIcon');
        icon.classList.add('rotate'); // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ

        fetch(window.location.pathname + '?refresh=1')
            .then(response => {
                if (response.ok) {
                    window.location.href = window.location.pathname; // –£–±–∏—Ä–∞–µ–º ?refresh=1 –∏–∑ URL
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
                    icon.classList.remove('rotate'); // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
                icon.classList.remove('rotate'); // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const btnPick = document.getElementById('btnPick');
        if (!btnPick) return;

        const ORIGINAL_TEXT = btnPick.textContent;

        btnPick.addEventListener('click', async () => {
            btnPick.disabled = true;
            btnPick.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶';

            try {
                const csrf = document.querySelector('meta[name="csrf-token"]')?.content || '';
                const resp  = await fetch("{{ route('sklad.orders.pick.fetch') }}", {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': csrf,
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                    credentials: 'same-origin',   // –≤–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞—ë–º –∫—É–∫–∏ —Å–µ—Å—Å–∏–∏
                    body: JSON.stringify({}),
                });

                const raw = await resp.text();  // —Å–Ω–∞—á–∞–ª–∞ —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ 419/500/HTML
                console.log('pick.fetch STATUS:', resp.status, resp.statusText);
                console.log('pick.fetch RAW   :', raw);

                // –µ—Å–ª–∏ –Ω–µ OK ‚Äî –ø–æ–∫–∞–∂–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –µ—Å—Ç—å
                if (!resp.ok) {
                    alert(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: HTTP ${resp.status}\n` + (raw?.slice(0, 500) || ''));
                    return;
                }

                // –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                let data;
                try {
                    data = raw ? JSON.parse(raw) : {};
                } catch (e) {
                    console.error('JSON parse error:', e);
                    alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ JSON).');
                    return;
                }

                if (data.ok && data.redirect) {
                    // –∏–¥—ë–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–±–æ—Ä–∞
                    window.location.href = data.redirect;
                } else {
                    alert((data && (data.msg || data.body)) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.');
                }

            } catch (err) {
                console.error('Fetch error:', err);
                alert('–°–±–æ–π —Å–µ—Ç–∏/—Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –∏ Network.');
            } finally {
                // –≤–µ—Ä–Ω—ë–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
                btnPick.disabled = false;
                btnPick.textContent = ORIGINAL_TEXT;
            }
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const btnAccept = document.getElementById('btnAccept');
        if (!btnAccept) return;

        const ORIGINAL = btnAccept.textContent;

        btnAccept.addEventListener('click', async () => {
            btnAccept.disabled = true;
            btnAccept.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶';

            try {
                const csrf = document.querySelector('meta[name="csrf-token"]')?.content || '';
                const resp = await fetch("{{ route('sklad.orders.accept.fetch') }}", {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': csrf,
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify({}),
                });

                const raw = await resp.text();
                console.log('accept.fetch STATUS:', resp.status, resp.statusText);
                console.log('accept.fetch RAW   :', raw);

                if (!resp.ok) {
                    alert(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: HTTP ${resp.status}\n` + (raw?.slice(0, 500) || ''));
                    return;
                }

                let data;
                try {
                    data = raw ? JSON.parse(raw) : {};
                } catch (e) {
                    console.error('JSON parse error:', e);
                    alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ JSON).');
                    return;
                }

                if (data.ok && data.redirect) {
                    window.location.href = data.redirect;
                } else {
                    alert((data && (data.msg || data.body)) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.');
                }
            } catch (err) {
                console.error('Fetch error:', err);
                alert('–°–±–æ–π —Å–µ—Ç–∏/—Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –∏ Network.');
            } finally {
                btnAccept.disabled = false;
                btnAccept.textContent = ORIGINAL;
            }
        });
    });
</script>



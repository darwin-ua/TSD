<?php

namespace App\Http\Controllers\Sklad;

use App\Exports\ProductsExport;
use App\Models\Event;
use App\Models\User;
use App\Models\Order;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Redis;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

class SkladOrderController extends Controller
{

    public function sendInvoiceRequest(Request $request)
    {
        $currentAdmin = auth()->user();
        $groupNameParts = explode(':', str_replace(' ', '', $currentAdmin->group));
        $groupName = $groupNameParts[1] ?? '';

        $selectedOrders = json_decode($request->input('selected_orders'), true);

        Log::info('üì§ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ selected_orders:', $selectedOrders);

        $–Ω–æ–º–µ—Ä–ó–∞–∫–∞–∑–∞ = is_array($selectedOrders) && count($selectedOrders) > 0
            ? ($selectedOrders[0]['order'] ?? null)
            : null;


        $—Å—Ç—Ä–æ–∫–∏ = [];

        if (is_array($selectedOrders)) {
            foreach ($selectedOrders as $order) {
                $sum = (float)str_replace([' ', ','], ['', '.'], $order['cost']);
                $baseDocument = $order['baseDocument'] ?? null;
               // $baseDocument = $order['baseDocument'] ?? '0000-000043'; // –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞

                Log::info('üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞:', [
                    'order' => $order['order'] ?? null,
                    'baseDocument' => $order['baseDocument'] ?? '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                ]);

                $—Å—Ç—Ä–æ–∫–∏[] = [
                    '–°—É–º–º–∞–ü—Ä–æ–¥—É–∫—Ü–∏–∏' => $sum,
                    '–°—É–º–º–∞–£—Å–ª—É–≥' => 0,
                    '–°—É–º–º–∞–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' => 0,
                    '–î–æ–∫—É–º–µ–Ω—Ç–û—Å–Ω–æ–≤–∞–Ω–∏–µ' => $baseDocument,
                ];
            }
        }

        $data = [
            '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è' => $groupName,
            '–î–∏–ª–µ—Ä' => $currentAdmin->name,
            '–î–∏–ª–µ—Ä–ê–ô–î–ò' => (string)Auth::user()->id_lk,
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–∞' => $request->input('payerName'),
            '–ï–î–†–ü–û–£–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–∞' => $request->input('edrpou'),
            '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è–ü–æ—á—Ç–∞–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–∞' => $request->input('email'),
            '–¢–µ–ª–µ—Ñ–æ–Ω–ü–ª–∞—Ç–µ–ª—å—â–∏–∫–∞' => $request->input('phone'),
            '–°—É–º–º–∞' => (float)$request->input('sum'),
            '–ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è' => $request->input('unit'),
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' => '–°–æ–∑–¥–∞–Ω–æ –∏–∑ –õ–ö –î–∏–ª–µ—Ä–∞',
            '–í—ã–¥–µ–ª—è—Ç—å–ú–æ–Ω—Ç–∞–∂–û—Ç–¥–µ–ª—å–Ω–æ–π–°—Ç—Ä–æ–∫–æ–π–í–°—á–µ—Ç–µ' => $request->input('separateInstall') === '–¢–∞–∫',
            '–ù—É–∂–µ–Ω–î–æ–≥–æ–≤–æ—Ä' => $request->input('needContract') === '–¢–∞–∫',
            '–ú–µ—Ç–æ–¥–ü–æ–ª—É—á–µ–Ω–∏—è–°—á–µ—Ç–∞' => '–°–∞–º–æ–≤—ã–≤–æ–∑',
            '–ú–µ—Ç–æ–¥–ü–æ–ª—É—á–µ–Ω–∏—è–û—Ç–≥—Ä—É–∑–æ—á–Ω—ã—Ö–î–æ–∫—É–º–µ–Ω—Ç–æ–≤' => '–°–∞–º–æ–≤—ã–≤–æ–∑',
            '–ë—é–¥–∂–µ—Ç' => $request->input('budgetOrg') === '–¢–∞–∫',
            '–ü–ª–∞—Ç–Ω–∏–∫–ü–î–í' => $request->input('vatPayer') === '–¢–∞–∫',
            '–ü–ò–ë–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ–õ–∏—Ü–æ' => $request->input('contactPerson'),
            '–ù–æ–º–µ—Ä–ó–∞–∫–∞–∑–∞' => $–Ω–æ–º–µ—Ä–ó–∞–∫–∞–∑–∞,
            '–ó–∞—è–≤–∫–∏–†–∞—Å—á–µ—Ç' => [
                '–°—Ç—Ä–æ–∫–∞' => $—Å—Ç—Ä–æ–∫–∏
            ]
        ];

        try {
            Log::debug('=== –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ 1–° ===', [
                'user_id' => $currentAdmin->id,
                'user_name' => $currentAdmin->name,
                'id_lk' => $currentAdmin->id_lk,
                'request_data' => $request->all(),
                'payload' => $data
            ]);

            Log::info('üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ 1–°: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', [
                '–Ω–æ–º–µ—Ä–ó–∞–∫–∞–∑–∞' => $–Ω–æ–º–µ—Ä–ó–∞–∫–∞–∑–∞,
            ]);

            $response = Http::withBasicAuth('–ö—É—á–µ—Ä–µ–Ω–∫–æ–î', 'NitraPa$$@0@!')
                ->acceptJson()
                ->timeout(180)
                ->post('http://185.112.41.230/darvin_test/hs/lk/creatingInvoice', $data);

            Log::info('üì¨ –û—Ç–≤–µ—Ç –æ—Ç 1–°', [
                'status' => $response->status(),
                'body' => $response->body(),
                'json' => $response->json(),
            ]);

            if ($response->successful()) {
                return response()->json([
                    'status' => 200,
                    'message' => '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
                    'body' => $response->json()
                ]);
            } else {
                return response()->json([
                    'status' => $response->status(),
                    'message' => '–û—à–∏–±–∫–∞ 1–°: ' . $response->status(),
                    'body' => $response->body()
                ], $response->status());
            }

        } catch (\Illuminate\Http\Client\RequestException $e) {
            Log::error('–û—à–∏–±–∫–∞ HTTP: ' . $e->getMessage());
            return response()->json([
                'status' => 500,
                'message' => '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å 1–°: ' . $e->getMessage(),
            ], 500);
        }
    }

    public function exportProductsToExcel(Request $request)
    {
        $products = json_decode($request->input('products'), true);
        return Excel::download(new ProductsExport($products), 'orders.xlsx');
    }

    public function index()
    {
        $admins = User::where('role_id', 1)->get();
        $currentAdmin = auth()->user();


        return view('sklad.orders.index', compact('currentAdmin', 'admins'));
    }

    public function addition()
    {
        $admins = User::where('role_id', 1)->get();
        $currentAdmin = auth()->user();


        return view('sklad.orders.addition', compact('currentAdmin', 'admins'));
    }

    public function equipm()
    {
        $admins = User::where('role_id', 1)->get();
        $currentAdmin = auth()->user();


        return view('sklad.orders.equipm', compact('currentAdmin', 'admins'));
    }

    public function create()
    {
        $currentAdmin = auth()->user();
        $admins = User::where('role_id', 1)->get();

        return view('sklad.orders.create',compact('currentAdmin','admins'));
    }

    public function statistic()
    {
        $currentAdmin = auth()->user();
        $admins = User::where('role_id', 1)->get();

        return view('sklad.orders.statistic', compact('currentAdmin','admins'));
    }

        public function store(Request $request)
    {
        $user = Auth::user();
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        $date = $request->input('date');
        $quantity = $request->input('quantity');

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)

        return response()->json(['message' => '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã'], 200);
    }


}

